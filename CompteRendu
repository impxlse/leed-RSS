# Varcinv-Projet-Lead

## Packaging de Leed

Dans ce compte rendu, je vais expliquer la démarche que j'ai adopté pour déployer l'application leed.

# Codebase 
Le code est organisé de manière à avoir une seule base de code pour l'ensemble du projet Leed. Le code source est versionné et suivi à l'aide de Git.


## Dépendance de l'application Leed
Avant de commencer à déployer l'application celle-ci necessite quelques dépendances à satisfaire.
- "Un serveur Apache" (conseillé)
- "PHP avec une version 7.2 minimum"
- "Une base de donnée MySQL"

## Structure de l'architecture
Concernant l'infrastructure, nous aurons deux conteneurs un qui jouera le rôle du serveur web et le second qui sera le serveur de base de donnée

les deux serveurs doivent pouvoir communiquer entre eux, ils sont donc situés sur le mème réseau.
Cela est fait dans mon docker-compose où les deux services partagent le même contexte, docker-compose les places par défaut dans un réseau commun

## Construction de l'image du serveur web
J'ai besoin de créer une image spécifique à mes besoins,
C'est pour cela, que je crée un Dockerfile pour construire une image.

Tout d'abord, comme base d'image j'utilise php:apache,
qui satisfait les prérequis sur la version php requise ainsi que le service apache. 

La version php sur l'image est la version PHP 8.3.0.

L'image a besoin de contenir le code source de l'application Leed présent dans le github, je récupère le code source avec une requete curl puis je decompresse l'archive.
J'ai ajouter une variable d'environnement nommé "ver" pour facilement modifié la version que l'on souhaite du code source quand de nouvelle release seront disponible.

```
ARG ver=1.14.0 
```

J'utilise curl pour récupérer l'archive la plus récente du projet puis je décompresse le projet dans le conteneu (Voir code ci-dessous).
```
RUN curl -L -o v1.14.0.tar.gz https://github.com/LeedRSS/Leed/archive/refs/tags/v1.14.0.tar.gz && \
    tar -xf v1.14.0.tar.gz -C /var/www/html --strip-components=1 && \
    rm v1.14.0.tar.gz 
```
Pour que le serveur soit correctement configuré nous avons besoin de donner les autorisations adéquat à celui-ci 

```
RUN chown -R www-data:www-data /var/www/html
```

Ensuite j'expose le port 80 du conteneur

```
EXPOSE 80
```
Je lance ensuite apache en fond pour qu'il soit déja executé au lancement du conteneur

```
CMD ["apache2-foreground"]
```

Enfin pour resoudre les erreur d'extension de MySQLi et GD pour PHP

Il faut les activer

```
RUN docker-php-ext-configure mysqli && docker-php-ext-install -j$(nproc) mysqli
RUN docker-php-ext-configure gd && docker-php-ext-install -j$(nproc) gd
```

## Lancement des conteneurs
Concernant le lancement des conteneurs, cela se passe au niveau du fichier "docker-compose.yml" contrairement au Dockerfile qui va construire une image, docker-compose.yml lui va lancer des conteneurs sur les images spécifiées avec les instructions fournies dans le fichier.

Le docker-compose utilise une image MySQL officielle et la configuration est également définie via des variables d'environnement.

## Persistance des données
La création d'un volume dans le fichier docker-compose permet de stocker les données de la base de donnée du conteneur sur la machine hôte et ainsi rendre les données persistantes entre les exécutions du conteneur.
```
volumes:
      - leed-db-data:/var/lib/mysql
```

## Variable d'environnement
L'utilisation recommandé d'utiliser des variables d'environnements dans le fichier docker-compose.yml.
Ces variables sont misent dans le fichier .env au même endroit que le fichier docker-compose.yml et offre un moyen pratique de personnaliser l'application


on peut retrouver les variables d'environnement utilisé dans le fichier .env :

```
# WEB
PORT_WEB=4269
# SQL
MYSQL_DATABASE=leeddb
MYSQL_USER=leeduser
MYSQL_PASSWORD=leedpwd
MYSQL_ROOT_PASSWORD=rootpwd
MYSQL_HOST=leed-database
LEED_ADMIN_USER=root
LEED_ADMIN_PASSWORD=root
```
## Automatisation de l'installation
Au lancement des conteneurs un script est utilisé pour initialiser la configuration de l'application en faisant une requête http.
Ce qui permet d'accéder directement à la page de connexion de l'application Leed à chaque éxécution des conteneurs.
Cette automatisation est effectué à l'aide d'un script qui réalise une requete http

```
curl -SL http://127.0.0.1/install.php -X POST \
     --data-urlencode "mysqlHost=${MYSQL_HOST}" \
     --data-urlencode "mysqlLogin=${MYSQL_USER}" \
     --data-urlencode "mysqlMdp=${MYSQL_PASSWORD}" \
     --data-urlencode "mysqlBase=${MYSQL_DATABASE}" \
     --data-urlencode "login=${LEED_ADMIN_USER}" \
     --data-urlencode "password=${LEED_ADMIN_PASSWORD}" \
     --data-urlencode "root=http://localhost:${PORT_WEB}" \
     --data "install_changeLngLeed=en&mysqlPrefix=leed__&installButton=" > /dev/null
```

Une fois les conteneurs lancé le fichier install.php est supprimé car il peut représenter un risque de sécurité.
"Une fois l'installation terminée, supprimez le fichier install.php par mesure de sécurité." [https://github.com/LeedRSS/Leed]

```
command: /bin/bash -c "rm /var/www/html/install.php && exec apache2-foreground"
```

Concernant la possibilité de lancer le conteneur web en mode developpement 
je le fait à l'aide de cette commande :

```
docker-compose build --build-arg
```
dans cette commande il faut spécifier la valeur de la variable DEV qui se trouve dans le Dockerfile pour modifier le build de l'image.

## Recul sur le projet
L'image Docker pourrait être publiée sur un registre Docker accessible si nécessaire. Actuellement, la distribution de l'image est fait en partageant le code source et les fichiers de configuration nécessaires.
Les logs de l'application sont gérés par les outils de conteneur Docker. Les logs peuvent être consultés à l'aide de commandes Docker standard,


## Source
Code source du projet
https://github.com/LeedRSS/Leed

Solution concernant le problème d'activation de l'extension mysqli
https://github.com/docker-library/php/issues/391
